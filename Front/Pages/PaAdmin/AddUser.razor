@page "/addUser"
@using System.ComponentModel.DataAnnotations
@using System.IO
@using OjedaGrowShop.EF.Services
@using OjedaGrowShop.EF.Services.Interfaces
@inject NavigationManager NavigationManager
@inject NavigationManager MyNavigationManager
@inject IUserService UserService;
@using OjedaGrowShop.Helper
@inject AuthorizationHelper authorizationHelper
@using Microsoft.AspNetCore.ProtectedBrowserStorage
@using OjedaGrowShop.Shared.ProductosIndex;
@inject ProtectedSessionStorage ProtectedSessionStore

<style>
    .formClass {
        margin-top: 125px !important;
        padding: 1rem;
        max-width: 650px;
        min-width: 300px;
    }

    .redirect {
        text-decoration: none;
        font-size: 0.9rem;
    }
</style>


<nav class="navbar navbar-expand-lg navbar-light " style="background-color: #009624 !important; z-index:100; ">
    <NavMenu />
</nav>

<div class="container mb-4 estiloFormulario align-content-center">
    <EditForm Model="addUser" OnValidSubmit="AddNewUser">
        <DataAnnotationsValidator />
        <div class="mx-auto my-0 text-center formClass" style="">

            <h2>Agregar nuevo usuario</h2>
            <MatThemeProvider Theme="@formLogin">
                <p>
                    <MatTextField Label="Usuario" @bind-Value="addUser.Username" />
                    <ValidationMessage For="@(() =>addUser.Username)" />
                </p>
                <p>
                    <MatTextField Label="Correo" @bind-Value="addUser.Email" Type="email" />
                    <ValidationMessage For="@(() => addUser.Email)" />

                </p>
                <p>
                    <MatTextField Label="Contraseña" @bind-Value="addUser.Password" Type="password" />
                    <ValidationMessage For="@(() => addUser.Password)" />

                </p>
                <p>
                    <MatTextField Label="Confirmar Contraseña" @bind-Value="addUser.PasswordCon" Type="password" />
                    <ValidationMessage For="@(() => addUser.PasswordCon)" />

                </p>
                <p>
                    <MatSelect Label="Rol para el usuario" @bind-Value="addUser.Rol">
                        <MatOptionString Value="cliente">Cliente</MatOptionString>
                        <MatOptionString Value="admin">Admin</MatOptionString>
                    </MatSelect>
                    <ValidationMessage For="@(() => addUser.Rol)" />
                </p>

                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <MatButton Type="submit" Raised="true">Registrarme</MatButton>
                     <MatButton Type="submit" Raised="true" Link="/panelAdmin" >Volver</MatButton>
                </div>
            </MatThemeProvider>
        </div>
    </EditForm>
</div>
@code {
    //Colores del tema del login
    MatTheme formLogin = new MatTheme()
        {
            Primary = "#009624",

        };

    [Inject]
    IJSRuntime JS { get; set; }
    [Inject]
    public IMatToaster Toaster { get; set; }


    protected override void OnInitialized()
    {
        if (!authorizationHelper.IsAdmin)
        {
            MyNavigationManager.NavigateTo("/");
        }
        else
        {
            Helper.MatToastHelper.Toaster = Toaster;
        }
    }


    void Success()
    {
        Helper.MatToastHelper.Show(MatToastType.Success, "¡Te has registrado correctamente!", "Registro");
        MyNavigationManager.NavigateTo("/login");
    }


    RegisterModel addUser = new RegisterModel();

    // Usuario, contraseña, email y confirmar contraseña
    public class RegisterModel
    {
        [Required(ErrorMessage = "El campo 'nombre' es obligatorio")]
        public string Username { get; set; }

        [Required(ErrorMessage = "El campo 'nombre' es obligatorio")]
        [RegularExpression("[a-zA-Z0-9_\\.\\+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-\\.]+", ErrorMessage = "Introduce un correo válido")]
        public string Email { get; set; }

        [Required(ErrorMessage = "El campo 'Contraseña' es obligatorio")]
        [RegularExpression("^(?=\\w*\\d)(?=\\w*[A-Z])(?=\\w*[a-z])\\S{8,16}$", ErrorMessage = "La contraseña debe tener al entre 8 y 16 caracteres, al menos un dígito, al menos una minúscula y al menos una mayúscula.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "El campo 'Contraseña' es obligatorio")]
        [RegularExpression("^(?=\\w*\\d)(?=\\w*[A-Z])(?=\\w*[a-z])\\S{8,16}$", ErrorMessage = "La contraseña debe tener al entre 8 y 16 caracteres, al menos un dígito, al menos una minúscula y al menos una mayúscula.")]
        [Compare("Password", ErrorMessage = "Debe ser igual la contraseña introducida")]
        public string PasswordCon { get; set; }

        [Required(ErrorMessage = "El campo 'Rol' es obligatorio")]
        public string Rol { get; set; }
    }

    private async void AddNewUser()
    {
        if (string.IsNullOrEmpty(addUser.Username) || string.IsNullOrEmpty(addUser.Password))
        {
            Helper.MatToastHelper.Show(MatToastType.Warning, "Debe llenar todos los campos", "Registro");
        }
        else
        {
            if (await UserService.Exist(addUser.Email))
            {
                Helper.MatToastHelper.Show(MatToastType.Danger, "¡El usuario ya existe!", "Registro");
            }
            else
            {
                int result = await UserService.AddUser(new EF.Models.User()
                    {

                        Name = addUser.Username,
                        Password = addUser.Password,
                        Correo = addUser.Email,
                        Rol = addUser.Rol
                    });
                if (result > 0)
                {
                    Helper.MatToastHelper.Show(MatToastType.Info, "El usuario se ha creado correctamente", "Registro");
                    MyNavigationManager.NavigateTo("/panelAdmin");
                }
                else
                {
                    Helper.MatToastHelper.Show(MatToastType.Danger, "¡Ha ocurrido un error, contacte con el administrador!", "Registro");
                }
            }


        }

    }


}
