@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Net.Http.Headers
@using OjedaGrowShop.EF.Services.Interfaces
@inject IUserService UserService;
@inject NavigationManager NavigationManager
@inject NavigationManager MyNavigationManager
@using Microsoft.AspNetCore.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore

<style>
    .formClass {
        margin-top: 125px !important;
        padding: 1rem;
        max-width: 650px;
        min-width: 300px;
        height: 350px;
    }

    .redirect {
        text-decoration: none;
        font-size: 0.9rem;
    }
</style>

<EditForm Model="userLogin" OnValidSubmit="@LoginUser">
    <DataAnnotationsValidator />

    <div class="container mb-4 estiloFormulario align-content-center">

        <div class="mx-auto my-0 text-center formClass" style="">

            <h2>¡Inicia sesión!</h2>
            <MatThemeProvider Theme="@formLogin">
                <p>
                    <MatTextField Label="Usuario" @bind-Value="userLogin.Username" />
                    <ValidationMessage For="@(() => userLogin.Username)" />
                </p>
                <p>
                    <MatTextField Label="Contraseña" @bind-Value="userLogin.Password" Type="password" />
                    <ValidationMessage For="@(() => userLogin.Password)" />
                </p>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <MatButton Raised="true">Iniciar sesión</MatButton>
                </div>
                <span><a class="redirect" href="@(MyNavigationManager.ToAbsoluteUri("Register"))">¿Aún no estas registrado?</a></span>
            </MatThemeProvider>
        </div>

    </div>
</EditForm>
@code {

    //Colores del tema del login
    MatTheme formLogin = new MatTheme()
        {
            Primary = "#009624",

        };

    [Inject]
    IJSRuntime JS { get; set; }
    [Inject]
    public IMatToaster Toaster { get; set; }


    LoginModel userLogin = new LoginModel();

    // Usuario y contraseña
    public class LoginModel
    {
        [Required(ErrorMessage = "El campo 'nombre' es obligatorio")]
        public string Username { get; set; }

        [Required(ErrorMessage = "El campo 'Contraseña' es obligatorio")]
        [MinLength(8, ErrorMessage = "La contraseña debe ser superior a 8 carácteres")]
        public string Password { get; set; }

    }


    private async void LoginUser()
    {
        Helper.MatToastHelper.Toaster = Toaster;
        if (string.IsNullOrEmpty(userLogin.Username) || string.IsNullOrEmpty(userLogin.Password))
        {
            Helper.MatToastHelper.Show(MatToastType.Warning, "Debe llenar todos los campos", "Login");
        }
        else
        {
            bool resultLogin = UserService.Login(userLogin.Username, userLogin.Password);
            if (resultLogin)
            {
                Helper.MatToastHelper.Show(MatToastType.Info, "¡Has logeado correctamente!", "Login");
                //Guardamos en el localStorage

                await ProtectedSessionStore.SetAsync("user", userLogin.Username);

                await ProtectedSessionStore.SetAsync("userRol", UserService.getRolUser(userLogin.Username));

                await ProtectedSessionStore.SetAsync("userId", UserService.getUserId(userLogin.Username));
                
                //var usuarioLogeado = await  ProtectedSessionStore.GetAsync<string>("user");
                //Helper.MatToastHelper.Show(MatToastType.Warning, usuarioLogeado, "Login");
                MyNavigationManager.NavigateTo("/");
            }
            else
            {
                Helper.MatToastHelper.Show(MatToastType.Warning, "No existe el usuario introducido", "Login");
                MyNavigationManager.NavigateTo("/login");
                userLogin.Username = "";
                userLogin.Password = "";
            }

        }
    }
}
