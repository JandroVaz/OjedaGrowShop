@using OjedaGrowShop.EF.Models
@using OjedaGrowShop.EF.Services.Interfaces
@using System.Globalization
@inject IProductService ProducCampService

<style>
    .card {
        box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
        width: 100% !important;
        min-width: 200px !important;
        max-width: 350px !important;
        margin: 0 auto;
    }

    @@media screen and (max-width:720px;) {
    }
</style>

<div class="mt-5 mb-5 overflow-hidden">
    <div class="row">
        <h3 data-aos="fade-right">Planta, cuida y cosecha.</h3>
        <h4 data-aos="fade-left">¡Los mejores productos a tu disposición!</h4>
    </div>
    <MatThemeProvider Theme="@cardShopIndex">
        <div class="row justify-content-center gap-3 mt-4 mb-4">
            @if (listProduct == null)
            {
                <p>loading...</p>
            }
            else
            {

                @for (var i = 0; i < 3; i++)
                {
                    <div data-aos="flip-left" class="col-12 col-md-4 col-xl-3">

                        <MatCard class="demo-mat-card card" Style="min-height:450px; position: relative;">
                            <MatCardContent>
                                <MatCardMedia Wide="true" Style="overflow:hidden;" ImageUrl="@getImage(listProduct[i].Imagen)"></MatCardMedia>
                                <div class="demo-mat-card-content">
                                    <MatHeadline6 class="demo-mat-card-clean-margin text-center">
                                        <span class="p-2">@listProduct[i].Nombre </span>
                                    </MatHeadline6>
                                    <MatSubtitle2 class="demo-mat-card-clean-margin text-center">
                                        @myTI.ToTitleCase(listProduct[i].Categoria)
                                    </MatSubtitle2>
                                </div>

                                <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin m-3 text-left">

                                    @if (listProduct[i].Descripcion.Length > 200)
                                    {
                                        <span>@listProduct[i].Descripcion.Substring(0,listProduct[i].Descripcion.Length-150)... </span>
                                        <MatButton Style="font-size:0.6rem;" OnClick="@(e=> OpenDialog(listProduct[i]))">Leer más</MatButton>

                                    }
                                    else
                                    {
                                        <span>@listProduct[i].Descripcion.Substring(0,listProduct[i].Descripcion.Length-30)... </span>
                                        <MatButton Style="font-size:0.6rem;" OnClick="@(e=> OpenDialog(listProduct[i]))">Leer más</MatButton>

                                    }


                                </MatBody2>
                            </MatCardContent>
                                                        <MatCardActions Style="position: absolute; bottom: 0; width:100%">
                                <MatCardActionIcons Class="justify-content-between">
                                    <MatButton Icon="@MatIconNames.Shopping_cart" OnClick="anadirCarro">Añadir al carrito</MatButton>
                                    <MatButton Style="font-size:1.2rem">@listProduct[i].Precio €</MatButton>
                                </MatCardActionIcons>
                            </MatCardActions>
                        </MatCard>
                    </div>
                }
                            <MatDialog @bind-IsOpen="@dialogIsOpen" Style="z-index:1001">
                <MatDialogTitle>@nomProd </MatDialogTitle>
                <MatDialogContent Style="color:black; font-size:1.2rem;" Class="text-left">
                    <div class="text-center">
                        <img src="@getImage(imgProd)" class="img-fluid" />
                    </div>
                    <p class="mt-5"><span style="font-weight:bold;">Categoría</span>:<br>@myTI.ToTitleCase(@categoriaProd)</p>
                    <p><span style="font-weight:bold;">Detalles</span>:<br>@descrProd</p>
                    <p><span style="font-weight:bold;">Precio</span>:<br>@precioProd €</p>
                </MatDialogContent>
                <MatDialogActions Class="justify-content-lg-between">
                    <MatButton Raised="true" OnClick="@(e => { dialogIsOpen = false; })">Cerrar</MatButton>
                    <MatButton Icon="@MatIconNames.Shopping_cart" OnClick="anadirCarro">Añadir al carrito</MatButton>
                </MatDialogActions>
            </MatDialog>
            }
        </div>
    </MatThemeProvider>
</div>

@*Estilos de las cartas*@

@code {


    public IEnumerable<Producto> producto { get; set; }

    public string Message { get; set; }

    public string tipoPro { get; set; } = "mascota";

        //TextInfo para capitalizar, mayusculas, minusculas...

    TextInfo myTI = new CultureInfo("en-US", false).TextInfo;

     //Datos de productos en el dialog

    private int idProd = 0;

    private string nomProd = string.Empty;

    private string descrProd = string.Empty;

    private string categoriaProd = string.Empty;

    private double precioProd = 0;

    private string imgProd = string.Empty;

    bool dialogIsOpen = false;

    Producto[] listProduct;

    [Inject]
    public IMatToaster Toaster { get; set; }

    MatTheme cardShopIndex = new MatTheme()
        {
            Primary = "#009624",

        };

    protected override void OnInitialized()
    {
        Helper.MatToastHelper.Toaster = Toaster;
    }


    public void anadirCarro()
    {
        Helper.MatToastHelper.Show(MatToastType.Info, "¡Se ha añadido al carrito!", "Producto");

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            producto = await ProducCampService.ListProduct();

            listProduct = producto.Where(e => e.TipoProducto == 2).ToArray();

        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    public string getImage(string image)
    {
        return "images/imgcampo/" + image;

    }

        //Apertura de dialog

    void OpenDialog(Producto producto)
    {
        dialogIsOpen = true;

        idProd = producto.Id;
        nomProd = producto.Nombre;
        descrProd = producto.Descripcion;
        precioProd = producto.Precio;
        categoriaProd = producto.Categoria;
        imgProd = producto.Imagen;
    }

    //Cierre
    void OkClick()
    {
        dialogIsOpen = false;
        idProd = 0;
        nomProd = string.Empty;
        descrProd = string.Empty;
        precioProd = 0;
        categoriaProd = string.Empty;
        imgProd = string.Empty;
    }
}
