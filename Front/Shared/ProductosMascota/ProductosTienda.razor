@using Microsoft.AspNetCore.ProtectedBrowserStorage
@using OjedaGrowShop.EF.Models
@using OjedaGrowShop.EF.Services.Interfaces
@using System.Globalization
@using OjedaGrowShop.Helper
@inject IProductService ProducCampService
@inject ICartService cartService
@inject ProtectedSessionStorage ProtectedSessionStore
@inject AuthorizationHelper authorizationHelper
<style>
    .card {
        box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
        min-width: 250px;
        max-width: 380px;
        margin: 0 auto;
    }
</style>


<div class="row">
    <div class="text-center bg-blue-100">
        <div class="row mx-auto my-0" style="min-width:180px; max-width:180px;">
            <MatTextField Label="Producto" ValueChanged="(string i) => Busqueda(i)"  />
            @*<MatAutocompleteList FullWidth="false" Items="@options" TItem="string" Label="Pick one"></MatAutocompleteList>*@
        </div>
        <div class="row">
            <label style="font-size:0.8rem;">¡Busca tu producto!</label>
        </div>
    </div>



</div>
<div class="row flex-wrap flex-column flex-md-row gap-5 justify-content-center" style="margin-top:50px; margin-bottom:50px">



    @if (listProduct != null)
    {
        @*        @for (var i = 0; i < listProduct.Where(e => e.TipoProducto == 2).Count(); i++)
            {

            }*@

        if (listProduct.Count() > 0)
        {
            @foreach (Producto item in listProduct)
            {
                @if (item.Id % 2 == 0)
                {
                    <div data-aos="flip-up" class="col-12 col-md-4 col-xl-3">

                        <MatCard class="demo-mat-card card" Style="min-height:450px; position: relative;">
                            <MatCardContent>
                                <MatCardMedia Wide="true" Style="overflow:hidden;" ImageUrl="@getImage(item.Imagen)"></MatCardMedia>
                                <div class="demo-mat-card-content">
                                    <MatHeadline6 class="demo-mat-card-clean-margin text-center">
                                        <span class="p-2">@item.Nombre </span>
                                    </MatHeadline6>
                                    <MatSubtitle2 class="demo-mat-card-clean-margin text-center">
                                        @myTI.ToTitleCase(item.Categoria)
                                    </MatSubtitle2>
                                </div>

                                <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin m-3">

                                    @if (item.Descripcion.Length > 200)
                                    {
                                        <span>@item.Descripcion.Substring(0,item.Descripcion.Length-150)... </span>
                                        <MatButton Style="font-size:0.6rem;" OnClick="@(e=> OpenDialog(item))">Leer más</MatButton>

                                    }
                                    else
                                    {
                                        <span>@item.Descripcion.Substring(0,item.Descripcion.Length-30)... </span>
                                        <MatButton Style="font-size:0.6rem;" OnClick="@(e=> OpenDialog(item))">Leer más</MatButton>

                                    }


                                </MatBody2>
                            </MatCardContent>
                            <MatCardActions Style="position: absolute; bottom: 0; width:100%">
                                <MatCardActionIcons Class="justify-content-between">
                                    @if (authorizationHelper.IsLoged)
                                    {
                                        <MatButton Disabled="disableButton" Icon="@MatIconNames.Shopping_cart"
                                            OnClick="(async() => await anadirCarro(item.Id))">Añadir al carrito</MatButton>
                                    }
                                    <MatButton Style="font-size:1.2rem">@item.Precio €</MatButton>
                                </MatCardActionIcons>
                            </MatCardActions>
                        </MatCard>
                    </div>

                }
                else
                {
                    <div data-aos="flip-left" class="col-12 col-md-4 col-xl-3">

                        <MatCard class="demo-mat-card card" Style="min-height:450px; position: relative;">
                            <MatCardContent>
                                <MatCardMedia Wide="true" Style="overflow:hidden;" ImageUrl="@getImage(item.Imagen)"></MatCardMedia>
                                <div class="demo-mat-card-content">
                                    <MatHeadline6 class="demo-mat-card-clean-margin text-center">
                                        <span class="p-2">@item.Nombre </span>
                                    </MatHeadline6>
                                    <MatSubtitle2 class="demo-mat-card-clean-margin text-center">
                                        @myTI.ToTitleCase(item.Categoria)
                                    </MatSubtitle2>
                                </div>

                                <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin  m-3">
                                    @if (item.Descripcion.Length > 250)
                                    {
                                        <span>@item.Descripcion.Substring(0,item.Descripcion.Length-150)... </span>
                                        <MatButton Style="font-size:0.6rem;" OnClick="@(e=> OpenDialog(item))">Leer más</MatButton>

                                    }
                                    else
                                    {
                                        <span>@item.Descripcion.Substring(0,item.Descripcion.Length-30)... </span>
                                        <MatButton Style="font-size:0.6rem;" OnClick="@(e=> OpenDialog(item))">Leer más</MatButton>

                                    }

                                </MatBody2>
                            </MatCardContent>
                            <MatCardActions Style="position: absolute; bottom: 0; width:100%">
                                <MatCardActionIcons Class="justify-content-between">
                                    @if (authorizationHelper.IsLoged)
                                    {
                                        <MatButton Disabled="disableButton" Icon="@MatIconNames.Shopping_cart"
                                            OnClick="(async() => await anadirCarro(item.Id))">Añadir al carrito</MatButton>
                                    }
                                    <MatButton Style="font-size:1.2rem">@item.Precio €</MatButton>
                                </MatCardActionIcons>
                            </MatCardActions>
                        </MatCard>
                    </div>
                }

            }
            <MatDialog @bind-IsOpen="@dialogIsOpen" Style="z-index:1001">
                <MatDialogTitle>@nomProd </MatDialogTitle>
                <MatDialogContent Style="color:black; font-size:1.2rem;">
                    <div class="text-center">
                        <img src="@getImage(imgProd)" class="img-fluid" />
                    </div>
                    <p class="mt-5"><span style="font-weight:bold;">Categoría</span>:<br>@myTI.ToTitleCase(@categoriaProd)</p>
                    <p><span style="font-weight:bold;">Detalles</span>:<br>@descrProd</p>
                    <p><span style="font-weight:bold;">Precio</span>:<br>@precioProd €</p>
                </MatDialogContent>
                <MatDialogActions Class="justify-content-lg-between">
                    <MatButton Raised="true" OnClick="@(e => { dialogIsOpen = false; })">Cerrar</MatButton>
                    @if (authorizationHelper.IsLoged)
                    {
                        <MatButton Disabled="disableButton" Icon="@MatIconNames.Shopping_cart"
                      OnClick="(async() => await anadirCarro(idProd))">Añadir al carrito</MatButton>
                    }
                </MatDialogActions>
            </MatDialog>

        }
        else
        {
            <div class="text-center">
                <h2>No podemos encontrar el producto que buscas... :(</h2>
            </div>
        }
    }
    else
    {
        <div class="text-center">
            <MatProgressCircle Indeterminate="true" FourColored="true" />
        </div>
    }

</div>

@code {
    string SearchText = "";
    //para hacer el SearchText https://www.daveabrock.com/2021/01/14/blast-off-blazor-search-box/

    public int idUsuario = 0;

    public IEnumerable<Producto> producto { get; set; }

    public string Message { get; set; }

    public string tipoPro { get; set; } = "mascota";

    //TextInfo para capitalizar, mayusculas, minusculas...

    TextInfo myTI = new CultureInfo("en-US", false).TextInfo;

    Producto[] listProduct;

    //Datos de productos en el dialog

    private int idProd = 0;

    private string nomProd = string.Empty;

    private string descrProd = string.Empty;

    private string categoriaProd = string.Empty;

    private double precioProd = 0;

    private string imgProd = string.Empty;

    string[] options = new string[0];

    bool dialogIsOpen = false;

    private bool disableButton = false;

    [Inject]
    public IMatToaster Toaster { get; set; }
    protected override void OnInitialized()
    {
        Helper.MatToastHelper.Toaster = Toaster;
    }


    public async Task anadirCarro(int idProduct)
    {
        disableButton = true;
        if (await cartService.AddProduct(idUsuario, idProduct))
        {
            Helper.MatToastHelper.Show(MatToastType.Info, "¡Se ha añadido al carrito!", "Carrito");
        }
        else
        {
            Helper.MatToastHelper.Show(MatToastType.Danger, "Ha ocurrido un error en la compra, contacte con un administrador", "Carrito");
        }
        disableButton = false;

    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            producto = await ProducCampService.ListProduct();

            listProduct = producto.Where(e => e.TipoProducto == 1).ToArray();

            if (listProduct.Any())
            {
                options = listProduct.Select(s => s.Nombre).ToList().ToArray(); 
            }

            idUsuario = await ProtectedSessionStore.GetAsync<int>("userId");

        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    public string getImage(string image)
    {
        return "images/imgmascota/" + image;

    }

    //Funcion para la busqueda por filtrado
    public void Busqueda(string name)
    {

        if (string.IsNullOrEmpty(name))
        {
            //Array de productos donde contendra los productos de campo
            listProduct = producto.Where(e => e.TipoProducto == 1).ToArray();
        }
        else
        {
            //Array de productos donde contendra los productos de campo filtrado
            listProduct = producto.Where(e => e.Nombre.ToLower().Contains(name.ToLower()) && e.TipoProducto == 1).ToArray();
        }
    }

    //Apertura de dialog

    void OpenDialog(Producto producto)
    {
        dialogIsOpen = true;

        idProd = producto.Id;
        nomProd = producto.Nombre;
        descrProd = producto.Descripcion;
        precioProd = producto.Precio;
        categoriaProd = producto.Categoria;
        imgProd = producto.Imagen;
    }

    //Cierre
    void OkClick()
    {
        dialogIsOpen = false;
        idProd = 0;
        nomProd = string.Empty;
        descrProd = string.Empty;
        precioProd = 0;
        categoriaProd = string.Empty;
        imgProd = string.Empty;
    }


}
